import { useState, useRef, useEffect } from 'react';\nimport { Send, Sparkles, MessageCircle, Wand2, Crystal, Moon, Stars } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { mastraClient } from '../lib/mastra';\nimport { ChatMessage } from '../types';\n\nexport default function ChatPage() {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const currentAssistantIdRef = useRef<string | null>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isTyping) {\n      const timer = setTimeout(() => {\n        setIsTyping(false);\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isTyping]);\n\n  // SSE数据解析函数\n  const parseSSEData = (data: string) => {\n    const lines = data.split('\\n');\n    const result = {\n      messageId: null as string | null,\n      textContent: '',\n      isFinished: false,\n      finishReason: null as string | null,\n      usage: null as any\n    };\n\n    for (const line of lines) {\n      if (line.trim() === '') continue;\n      \n      try {\n        if (line.startsWith('f:')) {\n          const metaData = JSON.parse(line.substring(2));\n          if (metaData.messageId) {\n            result.messageId = metaData.messageId;\n          }\n        }\n        else if (line.startsWith('0:')) {\n          const textPart = line.substring(2);\n          const cleanText = textPart.replace(/^\"(.*)\"$/, '$1');\n          result.textContent += cleanText;\n        }\n        else if (line.startsWith('e:')) {\n          const endData = JSON.parse(line.substring(2));\n          result.isFinished = true;\n          result.finishReason = endData.finishReason;\n          result.usage = endData.usage;\n        }\n        else if (line.startsWith('d:')) {\n          const doneData = JSON.parse(line.substring(2));\n          result.isFinished = true;\n          result.finishReason = doneData.finishReason;\n          result.usage = doneData.usage;\n        }\n      } catch (error) {\n        console.warn('解析SSE数据行时出错:', line, error);\n      }\n    }\n\n    return result;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: inputValue,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    setIsTyping(true);\n\n    try {\n      const agent = mastraClient.getAgent('fortuneTellingAgent');\n      const response = await agent.stream({\n        messages: [{ role: 'user', content: inputValue }]\n      });\n\n      const assistantId = `assistant-${Date.now()}`;\n      currentAssistantIdRef.current = assistantId;\n      setMessages(prev => [...prev, {\n        id: assistantId,\n        role: 'assistant',\n        content: '',\n        timestamp: new Date(),\n      }]);\n\n      response.processDataStream({\n        onTextPart: (rawData: string) => {\n          try {\n            const parsedData = parseSSEData(rawData);\n            \n            if (parsedData.textContent && currentAssistantIdRef.current) {\n              setMessages(prev => prev.map(m => m.id === currentAssistantIdRef.current\n                ? { ...m, content: m.content + parsedData.textContent }\n                : m\n              ));\n            }\n            \n            if (parsedData.isFinished) {\n              setIsLoading(false);\n              setIsTyping(false);\n            }\n            \n          } catch (error) {\n            console.error('处理SSE数据时出错:', error);\n            if (currentAssistantIdRef.current && typeof rawData === 'string') {\n              const lines = rawData.split('\\n');\n              let textContent = '';\n              \n              for (const line of lines) {\n                if (line.startsWith('0:')) {\n                  const textPart = line.substring(2).replace(/^\"(.*)\"$/, '$1');\n                  textContent += textPart;\n                }\n              }\n              \n              if (textContent) {\n                setMessages(prev => prev.map(m => m.id === currentAssistantIdRef.current\n                  ? { ...m, content: m.content + textContent }\n                  : m\n                ));\n              }\n            }\n          }\n        },\n        onError: (error: any) => {\n          console.error('数据流处理错误:', error);\n          setIsLoading(false);\n          setIsTyping(false);\n        },\n        onComplete: () => {\n          setIsLoading(false);\n          setIsTyping(false);\n          currentAssistantIdRef.current = null;\n        }\n      });\n\n    } catch (error) {\n      console.error('请求失败:', error);\n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: '抱歉，算命师暂时无法连接到神秘力量，请稍后再试...',\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      setIsLoading(false);\n      setIsTyping(false);\n    }\n  };\n\n  const quickQuestions = [\n    { text: '我的爱情运势如何？', icon: '💝', color: 'from-pink-500 to-rose-500' },\n    { text: '最近的工作运怎么样？', icon: '💼', color: 'from-blue-500 to-indigo-500' },\n    { text: '我适合什么颜色的房间？', icon: '🏠', color: 'from-green-500 to-emerald-500' },\n    { text: '帮我起个好听的名字', icon: '📝', color: 'from-orange-500 to-amber-500' },\n    { text: '给我一个人生智慧', icon: '🌾', color: 'from-yellow-500 to-orange-500' }\n  ];\n\n  return (\n    <div className=\"min-h-screen py-8 px-4 relative overflow-hidden\">\n      {/* 动态背景粒子 */}\n      <div className=\"fixed inset-0 pointer-events-none\">\n        {Array.from({ length: 20 }).map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-1 h-1 bg-purple-400/30 rounded-full\"\n            animate={{\n              y: [0, -100, 0],\n              x: [0, Math.random() * 50 - 25, 0],\n              opacity: [0, 1, 0],\n            }}\n            transition={{\n              duration: Math.random() * 5 + 3,\n              repeat: Infinity,\n              delay: Math.random() * 5,\n            }}\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n          />\n        ))}\n      </div>\n\n      <div className=\"max-w-4xl mx-auto relative z-10\">\n        {/* 华丽的标题区域 */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center mb-8\"\n        >\n          <div className=\"relative inline-block\">\n            <motion.div\n              animate={{ rotate: 360 }}\n              transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n              className=\"absolute -top-4 -left-4 w-8 h-8 text-purple-400\"\n            >\n              <Stars size={32} />\n            </motion.div>\n            <motion.div\n              animate={{ rotate: -360 }}\n              transition={{ duration: 15, repeat: Infinity, ease: \"linear\" }}\n              className=\"absolute -top-4 -right-4 w-8 h-8 text-pink-400\"\n            >\n              <Sparkles size={32} />\n            </motion.div>\n            \n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-purple-400 via-pink-400 to-indigo-400 bg-clip-text text-transparent\">\n              AI算命师对话\n            </h1>\n          </div>\n          <p className=\"text-gray-400 text-lg mb-2\">\n            与智慧的AI算命师交流，探索命运的奥秘\n          </p>\n          <div className=\"flex items-center justify-center space-x-2 text-sm text-purple-300\">\n            <Crystal size={16} />\n            <span>神秘力量已就绪</span>\n            <Moon size={16} />\n          </div>\n        </motion.div>\n\n        {/* 聊天容器 */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"relative\"\n        >\n          {/* 聊天框装饰边框 */}\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-purple-600 via-pink-600 to-indigo-600 rounded-3xl blur-sm opacity-30\"></div>\n          \n          <div className=\"relative bg-gradient-to-br from-slate-900/90 via-purple-900/50 to-slate-900/90 backdrop-blur-xl rounded-3xl border border-purple-500/30 shadow-2xl overflow-hidden\">\n            {/* 装饰性顶部栏 */}\n            <div className=\"bg-gradient-to-r from-purple-600/20 to-pink-600/20 px-6 py-3 border-b border-purple-500/30\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm text-purple-300 font-medium\">天机阁算命师在线</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-pulse\"></div>\n                  <div className=\"w-2 h-2 bg-pink-400 rounded-full animate-pulse\" style={{ animationDelay: '0.5s' }}></div>\n                  <div className=\"w-2 h-2 bg-indigo-400 rounded-full animate-pulse\" style={{ animationDelay: '1s' }}></div>\n                </div>\n              </div>\n            </div>\n\n            {/* 消息列表 */}\n            <div className=\"h-[500px] overflow-y-auto p-6 space-y-4 scrollbar-thin scrollbar-thumb-purple-500/50 scrollbar-track-transparent\">\n              <AnimatePresence>\n                {messages.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"text-center py-12\"\n                  >\n                    <motion.div\n                      animate={{ \n                        scale: [1, 1.1, 1],\n                        rotate: [0, 5, -5, 0]\n                      }}\n                      transition={{ \n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                      className=\"text-6xl mb-6\"\n                    >\n                      🔮\n                    </motion.div>\n                    <h3 className=\"text-2xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n                      欢迎来到天机阁\n                    </h3>\n                    <p className=\"text-gray-400 mb-8 max-w-md mx-auto leading-relaxed\">\n                      请提出您想了解的问题，算命师将为您答疑解惑。让古老的智慧指引您的人生道路。\n                    </p>\n                    \n                    <div className=\"space-y-3\">\n                      <p className=\"text-sm text-purple-300 mb-4 font-medium\">✨ 快速开始：</p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 max-w-2xl mx-auto\">\n                        {quickQuestions.map((question, index) => (\n                          <motion.button\n                            key={index}\n                            onClick={() => setInputValue(question.text)}\n                            whileHover={{ scale: 1.02, y: -2 }}\n                            whileTap={{ scale: 0.98 }}\n                            className={`p-3 bg-gradient-to-r ${question.color} bg-opacity-20 hover:bg-opacity-30 border border-current border-opacity-30 rounded-xl text-white text-sm transition-all duration-300 backdrop-blur-sm group`}\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-lg group-hover:scale-110 transition-transform\">{question.icon}</span>\n                              <span>{question.text}</span>\n                            </div>\n                          </motion.button>\n                        ))}\n                      </div>\n                    </div>\n                  </motion.div>\n                ) : (\n                  messages.map((message, index) => (\n                    <motion.div\n                      key={message.id}\n                      initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                      animate={{ opacity: 1, y: 0, scale: 1 }}\n                      transition={{ duration: 0.3, delay: index * 0.1 }}\n                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                    >\n                      <div\n                        className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl relative group ${\n                          message.role === 'user'\n                            ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg shadow-purple-500/25'\n                            : 'bg-gradient-to-r from-indigo-900/50 to-purple-900/50 border border-purple-500/30 text-purple-100 backdrop-blur-sm shadow-lg'\n                        }`}\n                      >\n                        {message.role === 'assistant' && (\n                          <div className=\"absolute -left-3 top-3 w-6 h-6 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-xs\">\n                            🔮\n                          </div>\n                        )}\n                        \n                        <div className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                          {message.content}\n                        </div>\n                        \n                        <div className={`text-xs mt-2 opacity-70 flex items-center justify-between ${\n                          message.role === 'user' ? 'text-purple-100' : 'text-purple-300'\n                        }`}>\n                          <span>\n                            {message.timestamp.toLocaleTimeString('zh-CN', {\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </span>\n                          {message.role === 'assistant' && (\n                            <Wand2 size={12} className=\"opacity-50\" />\n                          )}\n                        </div>\n                        \n                        {/* 消息装饰效果 */}\n                        {message.role === 'assistant' && (\n                          <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-purple-400 rounded-full opacity-20 animate-ping\"></div>\n                        )}\n                      </div>\n                    </motion.div>\n                  ))\n                )}\n              </AnimatePresence>\n              \n              {isLoading && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex justify-start\"\n                >\n                  <div className=\"bg-gradient-to-r from-indigo-900/50 to-purple-900/50 border border-purple-500/30 text-purple-100 px-4 py-3 rounded-2xl backdrop-blur-sm shadow-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <Sparkles size={16} className=\"text-purple-400\" />\n                      </motion.div>\n                      <div className=\"flex space-x-1\">\n                        {[0, 1, 2].map(i => (\n                          <motion.div\n                            key={i}\n                            animate={{ scale: [1, 1.5, 1] }}\n                            transition={{ \n                              duration: 1.5, \n                              repeat: Infinity, \n                              delay: i * 0.2 \n                            }}\n                            className=\"w-2 h-2 bg-purple-400 rounded-full\"\n                          />\n                        ))}\n                      </div>\n                      <span className=\"text-sm\">\n                        {isTyping ? '算命师正在解读星象...' : '正在连接神秘力量...'}\n                      </span>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n              \n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* 输入区域 */}\n            <div className=\"border-t border-purple-500/30 p-6 bg-gradient-to-r from-slate-900/50 to-purple-900/30 backdrop-blur-sm\">\n              <form onSubmit={handleSubmit} className=\"relative\">\n                <div className=\"relative group\">\n                  <input\n                    ref={inputRef}\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    placeholder=\"请输入您的问题... 让星辰为您指引方向\"\n                    className=\"w-full px-6 py-4 pr-16 bg-black/30 border border-purple-500/30 rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-purple-300/70 transition-all duration-300 backdrop-blur-sm group-hover:border-purple-400/50\"\n                    disabled={isLoading}\n                  />\n                  \n                  <motion.button\n                    type=\"submit\"\n                    disabled={isLoading || !inputValue.trim()}\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed rounded-xl flex items-center justify-center text-white shadow-lg transition-all duration-300\"\n                  >\n                    {isLoading ? (\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <Sparkles size={20} />\n                      </motion.div>\n                    ) : (\n                      <Send size={20} />\n                    )}\n                  </motion.button>\n                </div>\n                \n                {/* 输入提示 */}\n                <div className=\"flex items-center justify-center mt-3 text-xs text-purple-300/70 space-x-4\">\n                  <div className=\"flex items-center space-x-1\">\n                    <MessageCircle size={12} />\n                    <span>按 Enter 发送</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Crystal size={12} />\n                    <span>AI智能解读</span>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}"